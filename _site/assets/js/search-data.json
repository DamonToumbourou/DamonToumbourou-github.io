{"0": {
    "doc": "Blog Posts",
    "title": "Blog Posts",
    "content": " ",
    "url": "/notes/docs/blog",
    "relUrl": "/docs/blog"
  },"1": {
    "doc": "Blue Team Tips",
    "title": "Blue Team Tips",
    "content": " ",
    "url": "/notes/docs/security-bible/blue-team/blue-team-tips",
    "relUrl": "/docs/security-bible/blue-team/blue-team-tips"
  },"2": {
    "doc": "Blue Team Tips",
    "title": "Table of contents",
    "content": ". | Image File Execution Options (IFEO) | . Image File Execution Options (IFEO) . IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. IFEOs are represented as Debugger values in the Registry under HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where is the binary on which the debugger is attached. IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits . Canary tokens can be setup to Monitor Registry Key Image File Execution Options (IFEO) to find binary execution / suspicious commands without the binary even being present. https://canarytokens.org/ . ",
    "url": "/notes/docs/security-bible/blue-team/blue-team-tips#table-of-contents",
    "relUrl": "/docs/security-bible/blue-team/blue-team-tips#table-of-contents"
  },"3": {
    "doc": "Blue Team",
    "title": "Blue Team",
    "content": " ",
    "url": "/notes/docs/security-bible/blue-team",
    "relUrl": "/docs/security-bible/blue-team"
  },"4": {
    "doc": "Commandline Scripts",
    "title": "Commandline Scripts",
    "content": " ",
    "url": "/notes/docs/security-bible/blue-team/commandline-scripts",
    "relUrl": "/docs/security-bible/blue-team/commandline-scripts"
  },"5": {
    "doc": "Commandline Scripts",
    "title": "Table of contents",
    "content": ". | Search for any value in AD | . Search for any value in AD . Get-ADUser -LDAPFilter “(arn=&lt;search_term&gt;)” . ",
    "url": "/notes/docs/security-bible/blue-team/commandline-scripts#table-of-contents",
    "relUrl": "/docs/security-bible/blue-team/commandline-scripts#table-of-contents"
  },"6": {
    "doc": "Forensics",
    "title": "Forensics",
    "content": " ",
    "url": "/notes/docs/security-bible/forensics",
    "relUrl": "/docs/security-bible/forensics"
  },"7": {
    "doc": "Incident Response",
    "title": "Incident Response",
    "content": " ",
    "url": "/notes/docs/security-bible/incident-response#incident-response",
    "relUrl": "/docs/security-bible/incident-response#incident-response"
  },"8": {
    "doc": "Incident Response",
    "title": "Table of contents",
    "content": ". | SANS Incident Response Plan | . SANS Incident Response Plan . | Preparation review and codify an organizational security policy, perform a risk assessment, identify sensitive assets, define which are critical security incidents the team should focus on, and build a Computer Security Incident Response Team (CSIRT). | Identification monitor IT systems and detect deviations from normal operations, and see if they represent actual security incidents. When an incident is discovered, collect additional evidence, establish its type and severity, and document everything. | Containment perform short-term containment, for example by isolating the network segment that is under attack. Then focus on long-term containment, which involves temporary fixes to allow systems to be used in production, while rebuilding clean systems. | Eradication remove malware from all affected systems, identify the root cause of the attack, and take action to prevent similar attacks in the future. | Recovery bring affected production systems back online carefully, to prevent additional attacks. Test, verify and monitor affected systems to ensure they are back to normal activity. | Lessons learned—no later than two weeks from the end of the incident, perform a retrospective of the incident. Prepare complete documentation of the incident, investigate the incident further, understand what was done to contain it and whether anything in the incident response process could be improved. | . ",
    "url": "/notes/docs/security-bible/incident-response#table-of-contents",
    "relUrl": "/docs/security-bible/incident-response#table-of-contents"
  },"9": {
    "doc": "Incident Response",
    "title": "Incident Response",
    "content": ". ",
    "url": "/notes/docs/security-bible/incident-response",
    "relUrl": "/docs/security-bible/incident-response"
  },"10": {
    "doc": "Home",
    "title": "Notes on Security",
    "content": "by Damon Toumbourou . A collection of notes related to cyber security by Damon Toumbourou. About Me . Blue teamer / incident responder. ",
    "url": "/notes/#notes-on-security",
    "relUrl": "/#notes-on-security"
  },"11": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/notes/",
    "relUrl": "/"
  },"12": {
    "doc": "Lateral Movement",
    "title": "Lateral Movement",
    "content": " ",
    "url": "/notes/docs/security-bible/forensics/lateral-movement/",
    "relUrl": "/docs/security-bible/forensics/lateral-movement/"
  },"13": {
    "doc": "Lateral Movement",
    "title": "Table of contents",
    "content": ". | Remote Desktop (RDP) . | source | . | Map Network Shares . | source | . | . Remote Desktop (RDP) . source . Event Logs: 4648 - Logon specifying alt credentials 1024 - Dest Hostname 1102 - Dest IP address Registry: Remote desktop dest tracked per user: NTUSER\\Software\\Microsoft\\Terminal Server Client\\Servers ShimCache: SYSTEM: mstsc.exe - remote desktop client BAM/DAM: SYSTEM: last time executed - mstsc.exe - last time executed AmCache.hve: First time executed: mstsc.exe UserAssist: NTUSER.DAT: mstsc.exe - remote desktop client execution Last time executed Number of times executed RecentApps: NTUSER.DAT Mstsc.exe - remote desktop client Last time executed Number of times executed RecentItems subkey tracks connections dest and times File system: Jumplists: c:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\AutomaticDestinations\\{MSTSC-APPID}-automaticdestinations-ms Tracks remote desktop connection dest and times Prefetch: c:\\Windows\\Prefetch\\*mstsc.exe-{hash}.pf Bitmap Cach: c:\\Users\\&lt;user&gt;\\AppData\\Local\\Microsoft\\Terminal\\Server Client\\Cache bcache##.bmc cache####.bin . Map Network Shares . source . Event Logs: 4648: Logon specifying alt credentials 31001: Failed logon to dest . ",
    "url": "/notes/docs/security-bible/forensics/lateral-movement/#table-of-contents",
    "relUrl": "/docs/security-bible/forensics/lateral-movement/#table-of-contents"
  },"14": {
    "doc": "Malicious Documents",
    "title": "Malicious Documents",
    "content": " ",
    "url": "/notes/docs/security-bible/malware-analysis/malicious-documents/",
    "relUrl": "/docs/security-bible/malware-analysis/malicious-documents/"
  },"15": {
    "doc": "Malicious Documents",
    "title": "Table of contents",
    "content": ". | General Approach to Document Analysis | Microsoft Office Format Notes | Useful MS Office File Analysis Commands | Risky PDF Keywords | . General Approach to Document Analysis . | Examine the document for anomalies, such as risky tags, scripts, and embedded artifacts. | Locate embedded code, such as shellcode, macros, JavaScript, or other suspicious objects. | Extract suspicious code or objects from the file. | If relevant, deobfuscate and examine macros, JavaScript, or other embedded code. | If relevant, emulate, disassemble and/or debug shellcode that you extracted from the document. | Understand the next steps in the infection chain. | . Microsoft Office Format Notes . | Binary Microsoft Office document files (.doc, .xls, etc.) use the OLE2 (a.k.a. Structured Storage) format. | SRP streams in OLE2 documents sometimes store a cached version of earlier VBA macro code. | OOXML document files (.docx, .xlsm, etc.)supported by Microsoft Office are compressed zip archives. | VBA macros in OOXML documents are stored inside an OLE2 binary file, which is within the zip archive. | Excel supports XLM macros that are embedded as formulas in sheets without the OLE2 binary file. | RTF documents don’t support macros but can contain malicious embedded files and objects. | . Useful MS Office File Analysis Commands . zipdump.py: $ file.pptx Examine contents of OOXML file file.pptx. zipdump.py: $ file.pptx -s 3 -d Extract file with index 3 from file.pptx to STDOUT. Risky PDF Keywords . | /OpenAction and /AA specify the script or action to run automatically. | /JavaScript, /JS, /AcroForm, and /XFA can specify JavaScript to run. | /URI accesses a URL, perhaps for phishing. | /SubmitForm and /GoToR can send data to URL. | /ObjStm can hide objects inside an object stream. | /XObject can embed an image for phishing. | Be mindful of obfuscation with hex codes, such as/JavaScript vs. /J#61vaScript. (See examples.) | . Source: https://zeltser.com/media/docs/analyzing-malicious-document-files.pdf . ",
    "url": "/notes/docs/security-bible/malware-analysis/malicious-documents/#table-of-contents",
    "relUrl": "/docs/security-bible/malware-analysis/malicious-documents/#table-of-contents"
  },"16": {
    "doc": "Malware Analysis",
    "title": "Malware Analysis",
    "content": " ",
    "url": "/notes/docs/security-bible/malware-analysis",
    "relUrl": "/docs/security-bible/malware-analysis"
  },"17": {
    "doc": "Network Forensics",
    "title": "Network Forensics",
    "content": " ",
    "url": "/notes/docs/security-bible/forensics/network/network/",
    "relUrl": "/docs/security-bible/forensics/network/network/"
  },"18": {
    "doc": "Network Forensics",
    "title": "Table of contents",
    "content": ". ",
    "url": "/notes/docs/security-bible/forensics/network/network/#table-of-contents",
    "relUrl": "/docs/security-bible/forensics/network/network/#table-of-contents"
  },"19": {
    "doc": "Networking",
    "title": "Networking",
    "content": " ",
    "url": "/notes/docs/security-bible/networking",
    "relUrl": "/docs/security-bible/networking"
  },"20": {
    "doc": "Networking",
    "title": "Table of contents",
    "content": ". | General Concepts . | Autonomous System Number (ASN) | Border Gateway Protocol (BGP) | Demilitarized Zones (DMZ) | Address Resolution Protocol (ARP) | IPSec | . | . ",
    "url": "/notes/docs/security-bible/networking#table-of-contents",
    "relUrl": "/docs/security-bible/networking#table-of-contents"
  },"21": {
    "doc": "Networking",
    "title": "General Concepts",
    "content": "Autonomous System Number (ASN) . An autonomous system (AS) is a very large network or group of networks with a single routing policy. Each AS is assigned a unique ASN, which is a number that identifies the AS. An AS routing policy is a list of the IP address that the AS controls, plus a list of the other ASes to which it connects. The ASN (Autonomous System Number) are unique numbers that are only required for external communications with inter-network routers. Border Gateway Protocol (BGP) . ASes announce their routing policy to other ASers and routers vai the Border Gateway Protocol (BGP). BGP is the protocol for routing data packets between ASes. Without the routing information, operating the internet on a large scale would be impractical, as data packets would get lost or take too long. Each AS uses BGP to announce which IP address they are responsible for and which ASes the connect to. BGP routers take all the information from ASes around the world and put it into databases called routing tables to determine fastest paths from AS to AS. When packets arrive, BGP routers refer to their routing tables to determine which AS the packet should go to next. With so many ASes in the world, BGP routers are constantly updating their routing tables. As networks go offline, new networks come online, and ASes expand or contract their IP address space, all of this information has to be announced via BGP so that BGP routers can adjust their routing tables. Demilitarized Zones (DMZ) . The term DMZ known as Demilitarized zone, is a type of network where you deploy all your public internet-facing servers. It could be a web server, mail server, FTP server, etc. It is similar to the LAN network, but there are some differences. While in the LAN network, most of the traffic will be outbound, meaning the users will initiate the traffic out to the internet and come back. In DMZ, however, most of the traffic will be inbound. You open a certain port, for example, http/HTTPS, for your web server, and anybody on the internet will be able to reach your web server inside the DMZ. We can also deploy a web server on the LAN side and allow external users to access the webserver from the internet, But that’s not a good security practice. If your web server on the LAN got compromised, your entire LAN side of the network would be affected. For any public-facing traffic, it is recommended to keep them on an isolated network such as DMZ instead on the LAN. Address Resolution Protocol (ARP) . ARP is a protocol specifically used to map IP network addresses to physical addresses, such as Ethernet addresses. It translates 32-bits addresses to 48-bits addresses and vice versa. This is needed because the most common level of internet protocol(IP) we use today is 32-bits long and MAC addresses are 48-bits long. IPSec . secure network protocol suite that authenticates and encrypts packets of data to provide secure encrypted communication between two computers over an Internet Protocol network. It is used in virtual private networks (VPNs). ",
    "url": "/notes/docs/security-bible/networking#general-concepts",
    "relUrl": "/docs/security-bible/networking#general-concepts"
  },"22": {
    "doc": "Red Team",
    "title": "Red Team",
    "content": " ",
    "url": "/notes/docs/security-bible/forensics",
    "relUrl": "/docs/security-bible/forensics"
  },"23": {
    "doc": "Security Bible",
    "title": "Security Bible",
    "content": "A comprehensive collection of computer security notes. ",
    "url": "/notes/docs/security-bible",
    "relUrl": "/docs/security-bible"
  },"24": {
    "doc": "Standards",
    "title": "Standards",
    "content": " ",
    "url": "/notes/docs/security-bible/standards/standards/",
    "relUrl": "/docs/security-bible/standards/standards/"
  },"25": {
    "doc": "Standards",
    "title": "Table of contents",
    "content": ". | Security Standards . | ISO 27001 | PCI DSS | . | General Practices . | Essential Eight by The Australian Cyber Security Center: | Australian Government Information Security Manual (ISM): | . | . ",
    "url": "/notes/docs/security-bible/standards/standards/#table-of-contents",
    "relUrl": "/docs/security-bible/standards/standards/#table-of-contents"
  },"26": {
    "doc": "Standards",
    "title": "Security Standards",
    "content": "ISO 27001 . This is one of the common standards that adhere to the organization to implement an Information security management system. PCI DSS . PCI DSS stands for Payment Card Industry Data Security Standard. This can be considered as the standard that has to be opted by the organization that accepts payment through their gateway. The businesses that store user data like their name and card related information must have to adopt this standard in their organization . ",
    "url": "/notes/docs/security-bible/standards/standards/#security-standards",
    "relUrl": "/docs/security-bible/standards/standards/#security-standards"
  },"27": {
    "doc": "Standards",
    "title": "General Practices",
    "content": "Essential Eight by The Australian Cyber Security Center: . | Application whitelisting - Whitelist approved and trusted programs to prevent the execution of unapproved or malicious programs from executing. | Patching applications - Perform regular patching/updating of applications in your network. | Office macros - Configure Microsoft Office products to block the execution of un-trusted macros. | Harden user applications - Tightly control applications that have the ability to perform unwanted or potentially vulnerable actions. | Restrict administrative privileges - Restrict administrative privilege for operating systems and applications based on user duties. | Patch operating systems – Routinely patch and upgrade your operating systems to the latest versions. | Use multi-factor authentication - Set up multi-factor authentication to provide higher authentication assurance for privileged, power and remote user access. | Backup daily – Create regular backups of your most important data and configuration settings to help you recover quickly from a disruption. Keep backups on a device that is not connected to your network. | . Australian Government Information Security Manual (ISM): . https://www.cyber.gov.au/acsc/view-all-content/ism . ",
    "url": "/notes/docs/security-bible/standards/standards/#general-practices",
    "relUrl": "/docs/security-bible/standards/standards/#general-practices"
  },"28": {
    "doc": "Web",
    "title": "Web Attacks",
    "content": " ",
    "url": "/notes/docs/security-bible/red-team/web/#web-attacks",
    "relUrl": "/docs/security-bible/red-team/web/#web-attacks"
  },"29": {
    "doc": "Web",
    "title": "Table of contents",
    "content": ". | Cross-Site Scripting . | Definitions of XSS: | Types of XSS: | XSS Examples . | Reflected XSS Attack on a Search query | Reflected XSS Attack on an Error Message | Stored XSS example | . | . | . ",
    "url": "/notes/docs/security-bible/red-team/web/#table-of-contents",
    "relUrl": "/docs/security-bible/red-team/web/#table-of-contents"
  },"30": {
    "doc": "Web",
    "title": "Cross-Site Scripting",
    "content": "Cross-Site Scripting is also known as a client-side injection attack, which aims at executing malicious scripts on a victim’s web browser by injecting malicious code. Definitions of XSS: . Early on, two primary types of XSS were identified, Stored XSS and Reflected XSS. In 2005, Amit Klein defined a third type of XSS, which Amit coined DOM Based XSS. These 3 types of XSS are defined as follows: . | Reflected XSS (AKA Non-Persistent or Type I): Reflected XSS occurs when user input is immediately returned by a web application in an error message, search result, or any other response that includes some or all of the input provided by the user as part of the request, without that data being made safe to render in the browser, and without permanently storing the user provided data. In some cases, the user provided data may never even leave the browser (see DOM Based XSS below). | Stored XSS (AKA Persistent or Type II) Stored XSS generally occurs when user input is stored on the target server, such as in a database, in a message forum, visitor log, comment field, etc. And then a victim is able to retrieve the stored data from the web application without that data being made safe to render in the browser. With the advent of HTML5, and other browser technologies, we can envision the attack payload being permanently stored in the victim’s browser, such as an HTML5 database, and never being sent to the server at all. | DOM Based XSS (AKA Type-0) As defined by Amit Klein, who published the first article about this issue [1], DOM Based XSS is a form of XSS where the entire tainted data flow from source to sink takes place in the browser, i.e., the source of the data is in the DOM, the sink is also in the DOM, and the data flow never leaves the browser. For example, the source (where malicious data is read) could be the URL of the page (e.g., document.location.href), or it could be an element of the HTML, and the sink is a sensitive method call that causes the execution of the malicious data (e.g., document.write).” . | . Types of XSS: . For years, most people thought of these (Stored, Reflected, DOM) as three different types of XSS, but in reality, they overlap. You can have both Stored and Reflected DOM Based XSS. You can also have Stored and Reflected Non-DOM Based XSS too, but that’s confusing, so to help clarify things, starting about mid 2012, the research community proposed and started using two new terms to help organize the types of XSS that can occur: . | Server XSS Server XSS occurs when untrusted user supplied data is included in an HTTP response generated by the server. The source of this data could be from the request, or from a stored location. As such, you can have both Reflected Server XSS and Stored Server XSS. | . In this case, the entire vulnerability is in server-side code, and the browser is simply rendering the response and executing any valid script embedded in it. | Client XSS Client XSS occurs when untrusted user supplied data is used to update the DOM with an unsafe JavaScript call. A JavaScript call is considered unsafe if it can be used to introduce valid JavaScript into the DOM. This source of this data could be from the DOM, or it could have been sent by the server (via an AJAX call, or a page load). The ultimate source of the data could have been from a request, or from a stored location on the client or the server. As such, you can have both Reflected Client XSS and Stored Client XSS. | . With these new definitions, the definition of DOM Based XSS doesn’t change. DOM Based XSS is simply a subset of Client XSS, where the source of the data is somewhere in the DOM, rather than from the Server. Given that both Server XSS and Client XSS can be Stored or Reflected, this new terminology results in a simple, clean, 2 x 2 matrix with Client &amp; Server XSS on one axis, and Stored and Reflected XSS on the other axis as depicted in Dave Witchers’ DOM Based XSS talk . XSS Examples . Reflected XSS Attack on a Search query . Assume a web app accepts a search string from users through a search parameter within a query string: . http://darwin.com/aform.html?search=Hacker1 . In the event the application server uses PHP to show the user-supplied value on the results page by pulling it from the URL and then generating the resulting HTML: . &lt;?php echo 'You Searched:' .$_GET[\"search\"];?&gt; . The web server directly parses the user-supplied value in the URL to HTML with no input validation or output encoding. In such instances, attackers can craft arbitrary code that is executed in the browser when the victim clicks on the URL: . http://darwin.com/aform.html?search=&lt;script&gt;alert('XSS by Product1');&lt;/script&gt; . This script gives hackers access to the user’s session cookie and allows them to assume a legitimate user’s identity. Reflected XSS Attack on an Error Message . Suppose a web page accepts an input parameter that contains the text displayed in an error message and displays it directly within its response. In that case, attackers use such vulnerabilities to orchestrate XSS attacks. Assuming the URL that returns the error message as: . http://darwin.com/error/5/Error.ashx?message=Sorry%20+some+error+message . The returned error page directly copies the values of the URL’s message parameter then displays it suitably within the page: . &lt;p&gt;Sorry, some error message&lt;/&gt; . Without sanitization or appropriate validation, attackers can create a malicious payload to generate a pop-up screen: . http://darwin.com/error/5/Error.ashx?message=&lt;script&gt;alert(\"XSS by Hacker1\")&lt;/script&gt; . If an unsuspecting user requests this page, the browser executes the malicious script, redirecting the user to an HTML page with the following content in place of the actual content: . &lt;p&gt;&lt;scrRipt&gt;alert(\"XSS by Hacker1\");&lt;/script&gt;&lt;/p&gt; . Stored XSS example . Suppose a website allows users to submit comments on blog posts, which are displayed to other users. Users submit comments using an HTTP request like the following: . POST /post/comment HTTP/1.1 Host: vulnerable-website.com Content-Length: 100 postId=3&amp;comment=This+post+was+extremely+helpful.&amp;name=Carlos+Montoya&amp;email=carlos%40normal-user.net . After this comment has been submitted, any user who visits the blog post will receive the following within the application’s response: . &lt;p&gt;This post was extremely helpful.&lt;/p&gt; . Assuming the application doesn’t perform any other processing of the data, an attacker can submit a malicious comment like this: . &lt;script&gt;/* Bad stuff here... */&lt;/script&gt; . Within the attacker’s request, this comment would be URL-encoded as: . comment=%3Cscript%3E%2F*%2BBad%2Bstuff%2Bhere...%2B*%2F%3C%2Fscript%3E . Any user who visits the blog post will now receive the following within the application’s response: . &lt;p&gt;&lt;script&gt;/* Bad stuff here... */&lt;/script&gt;&lt;/p&gt; . ",
    "url": "/notes/docs/security-bible/red-team/web/#cross-site-scripting",
    "relUrl": "/docs/security-bible/red-team/web/#cross-site-scripting"
  },"31": {
    "doc": "Web",
    "title": "Web",
    "content": " ",
    "url": "/notes/docs/security-bible/red-team/web/",
    "relUrl": "/docs/security-bible/red-team/web/"
  },"32": {
    "doc": "Windows Endpoint",
    "title": "Windows Endpoint Forensics",
    "content": " ",
    "url": "/notes/docs/security-bible/forensics/windows/windows/#windows-endpoint-forensics",
    "relUrl": "/docs/security-bible/forensics/windows/windows/#windows-endpoint-forensics"
  },"33": {
    "doc": "Windows Endpoint",
    "title": "Table of contents",
    "content": ". | Windows Endpoint Forensics . | Windows Processes | Windows Evidence of File and Folder Opening | Windows Evidence of Application Execution | . | . ",
    "url": "/notes/docs/security-bible/forensics/windows/windows/#table-of-contents",
    "relUrl": "/docs/security-bible/forensics/windows/windows/#table-of-contents"
  },"34": {
    "doc": "Windows Endpoint",
    "title": "Windows Endpoint Forensics",
    "content": "Windows Processes . # System hosts threads that only run in kernel mode. Image: %Systemroot%\\System32\\ntoskrnl.exe (Task Manager / Process Hacker) and None (Process Explorer) # ntoskrnl.exe Windows NT operating system kernel executable. Acts as the central module (kernel) of the Windows OS. # smss.exe Sessions manager process is the first user mode process. It’s responsible for creating the list of the environment variables, the security descriptors that’ll be used by the various system resources, initializing the rest of the registry (HKLM Software and the SAM and security hives) and a lot more. - The system process creates the first SMSS instance and its known as the master SMSS.EXE process. It’s the only instance of SMSS.EXE that’ll stay after windows has booted up and one of the characteristics of this process is that it doesn’t have any command line arguments. - The master SMSS process will create at least two instances of itself. One in “Session 0” (OS) that will be responsible for creating the “wininit.exe” process and another in “Session 1” (User) that’ll represent the first logged-on user and will create the “winlogon.exe”. Both will spawn a “csrss.exe” process. - All the children SMSS.EXE processes created by the master SMSS.EXE process will exit after finishing their JOB. # Wininit.exe Windows initialization process is responsible for initializing and setting a lot of things. - It sets the default environment variables (USERPROFILE, ALLUSERPROFILE, PUBLIC and ProgramData). - It creates the LSASS process and sets the LSA encryption key. - It creates the Services Control manager by launching the SERVICES.EXE process - It creates the temp directory in the system root (%Systemroot%\\Temp). # regsvr32.exe Is a command-line utility to register and unregister OLE controls, such as DLLs and ActiveX controls in the Windows Registry. Regsvr32.exe is installed in the %systemroot%\\System32 folder in Windows XP and later versions of Windows. Usage: $ Regsvr32 [/u] [/n] [/i[:cmdline]] &lt;dllname&gt; - /u - Unregister server - /i - Call DllInstall passing it an optional [cmdline]; when it is used with /u, it calls dll uninstall - /n - do not call DllRegisterServer; this option must be used with /i - /s – Silent; display no message boxes # rundll32.exe Loads and runs 32bit dynamic-link libraries (DLLs). There are no configurable settings for Rundll32. Windows Evidence of File and Folder Opening . # Open/Save MRU Registry key tracks files that have been opened or saved within a Windows shell dialog box including web browsers and most applications. Interpretation: - The “*” key – This subkey tracks the most recent files of any extension input in an OpenSave dialog - .??? (Three letter extension) – This subkey stores file info from the OpenSave dialog by specific extension Location (Win7+): NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\ OpenSavePIDlMRU # Last-Visit MRU Tracks exe used by application to open files documented in Open/Save MRU the dir location for the last file that was accessed by that app. Interpretation: We get two important pieces of information from this key - applications executed by the user - and the last place in the file system that those applications interacted with. - Interesting and hidden directories are often identified via this registry key. Location (win7+): NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedPidlMRU # Recent Files Registry key tracks the last files and folders opened and is used to populate data in ‘recent’ menus. Intepretation: RecentDocs: Tracks overall order of the last 150 files or folders opened.???: These subkeys store the last 20 files opened by the user of each extension type. MRU list tracks the temporal order in which each file was opened. The most recently used (MRU) item is associated with the last write time of the key, providing one timestamp of file opening for each file extension type. Folder: This subkey stores the last 30 folders opened by the user. The most recently used (MRU) item in this key is associated with the last write time of the key, providing the time of opening for that folde Location: NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs # Jump Lists Allows users to access frequently used items. Data stored in AutomaticDestinations folder will each have a unique file prepended with the AppID of the association application and embedded with LNK files in each stream. Interpretation: - Each jump list file is named according to an application identifier (AppID). List of Jump List IDs -&gt; https://dfir.to/EZJumpList - Each Jump List contains a collection of items interacted with (up to ~2000 items per application) - Each entry is represented as a LNK shell item providing additional data - Target Timestamps - File Size - Local Drive | Removable Media | Network Share Info - Entries kept in MRU order including a timestamp for each item Location: - %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\AutomaticDestinations - %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\CustomDestinations # Shell Bags: Which folders were accessed on the local machine, network or removable device. Explorer access: USRCLASS.DAT Desktop Access: NTUSER.DAT Interpretation: - Massive collection of data on folders accessed by each user - Folder file system timestamps are archived in addition to first and last interaction times - “Exotic” items recorded like mobile device info, control panel access, and Zip archive acces Location: Primary Data - USRCLASS.DAT\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\Bags - USRCLASS.DAT\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\BagMRU Residual Desktop Items and Network Shares - NTUSER.DAT\\Software\\Microsoft\\Windows\\Shell\\BagMRU - NTUSER.DAT\\Software\\Microsoft\\Windows\\Shell\\Bags # Shortcut Files (LNK) Shortcut files created for: Shortcut files are automatically created by Windows, tracking files and folders opened by a user Interpretation: - Date/Time file of that name was first opened - Creation Date of Shortcut (LNK) File - Date/Time file of that name was last opened - Last Modification Date of Shortcut (LNK) File - LNK Target File (Internal LNK File Information) Data - Modified, Access, and Creation times of the target file - Volume Information (Name, Type, Serial Number) - Network Share information - Original Location - Name of System Location: - Win7+: %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\ - Win7+: %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Office\\Recent\\ # IE|Edge file:// Internet Explorer History databases have long held information on local and remote file access (via network shares), giving us an excellent means for determining files accessed on the system, per user. Information can be present even on Win11+ systems missing the Internet Explorer application. Not just related to internet browsing but also stores local, removable and remote (via network shares) file access. Interpretation: - Entries recorded as: file:///C:/directory/filename.ext - Does not mean file was opened in a browse Location: - IE10–11 &amp; Win10+: %USERPROFILE%\\AppData\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV*.dat # Office Recent Files MS Office apps will track their own recent file Location: NTUSER.DAT # MS Word Reading Locations Starting with Word 2013, the last known position of the user within a Word document is recorded. Interpretation: - Another source tracking recent documents opened - The last closed time is also tracked along with the last position within the file - Together with the last opened date in the Office File MRU key, a last session duration can be determined Location: NTUSER\\Software\\Microsoft\\Office\\&lt;Version&gt;\\Word\\Reading Location . Windows Evidence of Application Execution . # Shimcache The Windows Application Compatibility Database is used by Windows to identify possible application compatibility challenges with executables. It tracks the executable file path and binary last modified time. Interpretation: Any executable present in the file system could be found in this key. Data can be particularly useful to identify the presence of malware on devices where other application execution data is missing (such as Windows servers). - Full path of executable - Windows 7+ contains up to 1,024 entries (96 entries in WinXP) - Post-WinXP no execution time is available - Executables can be preemptively added to the database prior to execution. - The existence of an executable in this key does not prove actual execution. Location: - Win7+: SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCompatCach # Windows 10 Timeline Win10 records recently used applications and files in a “timeline” database in SQLite format. Interpretation: - Full path of executed application - Start time, end time, and duration - Items opened within application - URLs visited - Databases still present even after feature deprecation in late-Win10 Location: - C:\\Users\\&lt;profile&gt;\\AppData\\Local\\ConnectedDevicesPlatform\\&lt;account-ID&gt;\\ActivitiesCache.db # Task Bar Feature Usage Tracks how a user has interacted with the taskbar. Interpretation: - Only tracks GUI applications - Does not include timestamps - AppLaunch tracks data only for pinned applications, showing user knowledge of the application - Data persists after an application is unpinned - AppSwitched tracks a count of application focus, showing user interaction directed at the application - Not tied to pinned applications Location: - Win 10 1903+: NTUSER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FeatureUsage # BAM/DAM Windows Background/Desktop Activity Moderator (BAM/DAM) is maintained by the Windows power management sub-system. (Available in Win10+) Interpretation: - Provides full path of file executed and last execution date/time - Typically up to one week of data available - “State” key used in Win10 1809+ Location: - SYSTEM\\CurrentControlSet\\Services\\bam\\State\\UserSettings\\{SID} - SYSTEM\\CurrentControlSet\\Services\\dam\\State\\UserSettings\\{SID # Amcache.hve Amcache tracks installed applications, programs executed (or present), drivers loaded, and more. What sets this artifact apart is it also tracks the SHA1 hash for executables and drivers. (Available in Win7+) Interpretation: - A complete registry hive, with multiple sub-keys - Full path, file size, file modification time, compilation time, and publisher metadata - SHA1 hash of executables and drivers - Amcache should be used as an indication of executable and driver presence on the system, but not to prove actual execution Location: - C:\\Windows\\AppCompat\\Programs\\Amcache.hve # System Resource Usage Monitor (SRUM) SRUM records 30 to 60 days of historical system performance including applications run, user accounts responsible, network connections, and bytes sent/received per application per hour. SRUDB.dat is an Extensible Storage Engine database Interpretation: - Three tables in SRUDB.dat are particularly important: - {973F5D5C-1D90-4944-BE8E-24B94231A174} = Network Data Usage - {d10ca2fe-6fcf-4f6d-848e-b2e99266fa89} = Application Resource Usage - {DD6636C4-8929-4683-974E-22C046A43763} = Network Connectivity Usage Location: - Win8+: C:\\Windows\\System32\\SRU\\SRUDB.dat # Jump Lists Windows Jump Lists allow user access to frequently or recently used items quickly via the task bar. First introduced in Windows 7, they can identify applications in use and a wealth of metadata about items accessed via those applications Interpretation: - Each jump list file is named according to an application identifier (AppID). List of Jump List IDs -&gt; https://dfir.to/EZJumpList - Automatic Jump List Creation Time = First time an item added to the jump list. Typically, the first time an object was opened by the application. - Automatic Jump List Modification Time = Last time item added to the jump list. Typically, the last time the application opened an object. Location: - %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\AutomaticDestinations # Last Visited MRU Tracks applications in use by the user and the directory location for the last file accessed by the application. Interpretation: - We get two important pieces of information from this key: - applications executed by the user, - and the last place in the file system that those applications interacted with. Interesting and hidden directories are often identified via this registry key. Location: - Win7+: NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\LastVisitedPidlMRU # Prefetch Designed to speed up applications’ startup processes. File names consist of two parts: an executable name, and an eight-character hash of the executable’s location. Prefetch files contain various metadata: executable name, run count, volume information, files and directories referenced by the executable, and of course, timestamps. Interpretation: - file’s creation timestamp as the timestamp of the first execution. - embedded timestamp of the last execution - since version 26 (Windows 8.1), the 7 most recent last run times. Location: %SystemRoot%\\Prefetch # Commands Executed in the Run Dialog A history of commands typed into the Run dialog box are stored for each user. Interpretation: - It is an MRU key, so it has temporal order via the MRUList key Location: - NTUSER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU # UserAssist UserAssist records metadata on GUI-based program executions. Interpretation: - GUIDs identify type of execution (Win7+) - CEBFF5CD Executable File Execution - F4E57C4B Shortcut File Execution - Values are ROT-13 Encoded - Application path, last run time, run count, focus time and focus count Location: - NTUSER.DAT\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{GUID}\\Count . ",
    "url": "/notes/docs/security-bible/forensics/windows/windows/#windows-endpoint-forensics-1",
    "relUrl": "/docs/security-bible/forensics/windows/windows/#windows-endpoint-forensics-1"
  },"35": {
    "doc": "Windows Endpoint",
    "title": "Windows Endpoint",
    "content": " ",
    "url": "/notes/docs/security-bible/forensics/windows/windows/",
    "relUrl": "/docs/security-bible/forensics/windows/windows/"
  }
}
